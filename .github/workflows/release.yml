name: Release and AUR Publish

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get current version
        id: version
        run: |
          if [ -f VERSION ]; then
            VERSION=$(cat VERSION)
          else
            VERSION="1.0.0"
            echo "$VERSION" > VERSION
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Check if tag exists
        id: tag-check
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.version.outputs.version }} does not exist"
          fi

      - name: Check if release exists
        id: release-check
        run: |
          if gh release view "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.version }} does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create tag if not exists
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.version.outputs.version }}" -m "Release version ${{ steps.version.outputs.version }}"
          git push origin "v${{ steps.version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build application
        run: |
          mkdir -p bin/
          go build -ldflags "-X 'main.appVersion=${{ steps.version.outputs.version }}'" -o bin/wgo main.go
          ls -la bin/

      - name: Create GitHub Release
        if: steps.release-check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          files: bin/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update AUR package
        if: steps.release-check.outputs.exists == 'false'
        run: |
          # Set up SSH key for AUR
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/aur
          chmod 600 ~/.ssh/aur
          chmod 700 ~/.ssh
          ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
          
          # Configure SSH to use the AUR key
          cat >> ~/.ssh/config << EOF
          Host aur.archlinux.org
            IdentityFile ~/.ssh/aur
            User aur
            IdentitiesOnly yes
          EOF
          chmod 600 ~/.ssh/config
          
          # Test SSH connection
          ssh -T aur@aur.archlinux.org || echo "SSH test failed, continuing..."
          
          # Clone AUR repository (or create if it doesn't exist)
          if git ls-remote ssh://aur@aur.archlinux.org/go-weather.git &>/dev/null; then
            git clone ssh://aur@aur.archlinux.org/go-weather.git aur-repo
          else
            mkdir aur-repo
            cd aur-repo
            git init
            git remote add origin ssh://aur@aur.archlinux.org/go-weather.git
            cd ..
          fi
          
          # Copy and update PKGBUILD
          cp PKGBUILD aur-repo/
          cp .SRCINFO aur-repo/
          cd aur-repo
          
          # Update PKGBUILD with new version
          sed -i "s/pkgver=.*/pkgver=${{ steps.version.outputs.version }}/" PKGBUILD
          
          # Update .SRCINFO with new version
          sed -i "s/pkgver = .*/pkgver = ${{ steps.version.outputs.version }}/" .SRCINFO
          sed -i "s/source = wgo-.*.tar.gz/source = wgo-${{ steps.version.outputs.version }}.tar.gz::https:\/\/github.com\/streek\/go-weather\/archive\/v${{ steps.version.outputs.version }}.tar.gz/" .SRCINFO

          # Commit and push to AUR
          git config user.name "Keith Connolly"
          git config user.email "streek@mesaro.com"
          git config --global init.defaultBranch master
          git add PKGBUILD .SRCINFO
          git commit -m "Update to version ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push --set-upstream origin master
        env:
          SSH_PRIVATE_KEY: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
